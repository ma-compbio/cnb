// Code generated by go-bindata.
// sources:
// favicon.ico
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faviconIco = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x62\x60\x60\x04\x42\x01\x01\x10\xad\xc0\x90\xc1\xc2\xc0\x20\xc6\xc0\xc0\xa0\x01\xc4\x40\x21\xa0\x08\x44\x1c\x0c\x80\x72\x42\xdc\x10\x4c\x2c\x68\x0d\x77\x62\x68\x08\x71\x66\x6e\x0a\x73\x61\x6a\x8b\x70\x22\x5e\x23\x14\x6c\x2b\xd6\x67\xd8\x58\x60\x68\xb9\xa5\xd0\x20\xee\xff\x62\x1e\x86\xfa\x10\x57\x92\xf4\xef\x2a\xd5\x65\xd8\x54\x60\x10\xb2\xab\x54\x6f\xf3\xb4\x44\x4b\x76\x20\x26\x51\xbf\x3e\x50\xbf\x51\xe8\xbe\x72\xdd\xc3\x9b\x0a\x0d\x79\xd7\xe7\x1b\x91\xa4\x7f\x6f\x99\x1e\xc3\xce\x12\xc3\x60\xa0\xfe\xeb\x6b\x72\x4d\xa4\x56\xe7\x9a\xe2\x54\x5b\x7b\xe8\x3e\x43\xcd\x91\x07\x40\xfc\x90\x09\x88\x15\x26\x6d\xdb\xa1\xbe\x6c\xe3\x42\xa1\xfd\xe5\xba\xc1\x07\x2a\x74\x1e\x6e\x2d\x32\x54\x01\x62\x0c\x7d\x2d\x61\x16\x0c\x3d\xd1\xe6\x4c\x6b\x72\x8d\x4c\x36\x64\x69\x09\x57\x9c\x7a\x23\xdf\xb9\xe7\x84\xe7\xcc\x4d\x6b\xa2\x66\x6e\xdd\xa4\xb2\xb7\xde\x32\xfe\x60\x85\xf6\xcb\x1d\x25\xfa\xfa\x20\xff\xa0\x83\xe6\x30\x2b\x86\xff\x7b\x05\x19\x36\x14\x18\x45\xed\x2e\xd5\x5b\xb2\xb5\xd2\xd2\xba\xe6\xe0\x5d\xbd\xae\xdd\xc7\x43\xa6\x6d\xdd\x12\xb8\xad\xd1\x39\xff\x40\x85\xf6\xa7\x6d\x45\x06\xb6\x3b\x4b\x30\xf5\x83\xc0\xf2\x6c\x73\x86\x9e\x18\x67\xa6\xbd\x65\x3a\xf1\x40\xbf\x5e\xda\x58\xeb\x92\xd7\xb4\xef\x92\x5d\xeb\xf6\xa3\x8e\xfb\x2a\x0d\xe6\xee\x2b\xd7\xb9\x0b\x0c\x3b\x15\x60\x5c\xe2\xf4\xff\x8e\x62\x6d\x86\x85\x69\x9a\x8c\x40\xbb\xa2\x0f\x54\xea\xdd\xdb\x51\x6f\xb7\x6e\x7f\x85\xee\x46\xa0\xde\xab\xdb\x8a\xf4\x43\xfe\xff\x67\x60\x98\x9a\x60\x8b\x37\xbc\xb7\x17\x1b\x30\x3c\xed\x96\x62\xd8\x5f\xae\x93\x7f\xa8\x52\xeb\x3f\x30\xdc\x36\x6c\x2e\x34\x50\xb5\x36\x4e\x64\x98\x9d\x6a\x83\x55\xcf\xda\x3c\x63\x86\x65\x59\x66\x02\x5b\x8a\x0c\xdd\x37\x17\xea\x85\x6d\x29\xd4\x0d\x02\xea\xef\x3e\x54\xa9\xfd\x0f\x68\x77\xcb\xf6\x12\x03\xb9\x4d\x85\x06\x52\xeb\xf2\x0c\x05\x57\xe6\x98\xb2\xb7\x84\x3b\x33\xf4\xc7\x22\xdc\xb1\x36\xd7\x08\xa8\xdf\x44\x0a\x98\x56\x8b\x81\xe9\x6d\xc2\x9e\x52\xdd\x65\x40\x7d\xdb\x81\x66\x1c\x05\x86\xc5\x41\x60\x98\x6f\xd9\x51\x62\xb0\x66\x5b\xb1\xc1\x02\x60\x5a\x4a\xe8\x88\xb4\x67\x41\xd6\x0f\x03\xc6\xae\x1b\x19\x0c\x9c\x37\x33\x3b\xba\xaf\x12\x0f\x08\x98\x21\x9b\x1a\xd9\x26\xd3\x98\x90\x2a\x35\x35\xd5\x43\x62\x71\x86\x95\xc4\xd2\x4c\x0b\xc9\x55\x39\xe6\xbc\x19\xae\xb6\x0c\x6d\xe1\x76\x18\xfa\x4d\x3d\xf7\x32\x98\x78\xee\x16\x33\x73\xbf\x30\xc9\xcc\xe3\xfa\x26\x53\xcf\x1b\x1b\xcd\xdc\xaf\x2e\x33\xf5\xb8\xdc\x61\xec\xb5\x5f\xc3\xd4\xfb\x2c\xde\xb0\x33\x75\x5f\xc5\x60\xe2\xbe\x94\xc9\xd4\xe3\x98\xa8\x99\xf7\x45\x55\x33\x9f\x93\x86\xe6\xee\x7b\x2d\xcc\x3c\x8e\xeb\x9b\x7a\xed\xe1\x31\xf3\x3a\x86\xa1\xe7\xff\x7c\x28\xee\x47\xe0\x1f\xfc\x0c\x0c\x07\x80\xf8\x01\x14\x7f\x90\x67\x60\xf8\x03\xc4\x07\x98\x21\xf8\x03\x33\x44\x0c\x84\x01\x01\x00\x00\xff\xff\x85\x34\x54\x37\x7e\x04\x00\x00")

func faviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_faviconIco,
		"favicon.ico",
	)
}

func faviconIco() (*asset, error) {
	bytes, err := faviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "favicon.ico", size: 1150, mode: os.FileMode(420), modTime: time.Unix(1526565907, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"favicon.ico": faviconIco,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"favicon.ico": &bintree{faviconIco, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
