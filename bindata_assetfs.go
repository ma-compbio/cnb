// Code generated by go-bindata.
// sources:
// favicon.ico
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faviconIco = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x93\xcd\x4b\x6a\x5d\x14\xc6\x8f\x65\x11\xbd\x7d\x88\x83\x37\x82\x22\x6b\xd2\x6d\xd0\xa4\x68\x16\x11\x0d\x82\x20\x82\xa8\x41\xa3\xa0\x9a\xdc\x49\x51\xd1\xb4\x88\x9a\x05\x8e\xd4\x81\xa0\xe0\x7f\x20\x38\x50\x04\x15\x47\x0a\xe2\x44\x41\x1c\x28\x28\xa8\x88\xa0\x13\xbf\xbf\x9f\xeb\x5a\xb1\x37\x47\xee\xe5\x4e\xee\x23\x9b\xb3\xcf\xda\xfb\xb7\xcf\xb3\xd6\x5e\x2a\x8a\x66\xf4\xd3\xe9\xe8\x69\x50\x7e\x6a\x15\xe5\x7f\x45\x51\x7e\x8c\xc6\x28\x34\x8a\x7c\xc7\x59\xa3\x35\xfd\x7f\xdf\x43\x08\x2a\x0d\x06\x03\x0c\x87\x43\xf9\xde\xeb\xf5\x50\xab\xd5\x50\xaf\xd7\xd1\xef\xf7\xf1\x37\x11\x4b\x6a\xb7\xdb\xf0\x7a\xbd\x78\x7d\x7d\xc5\xd9\xd9\x19\x0e\x0f\x0f\x71\x70\x70\x80\xe7\xe7\x67\x84\x42\x21\x74\x3a\x9d\xb1\x6f\xa8\xd9\x54\x2a\x85\xdb\xdb\x5b\x6c\x6e\x6e\x62\x6a\x6a\x0a\x64\x8f\x86\x46\xa3\xe1\xe7\xec\xec\x2c\x2c\x16\xcb\x98\x4f\xc1\xfa\x7c\x3e\xe6\x74\x3a\x1d\xef\xa3\xfd\x5b\x5b\x5b\x38\x39\x39\xe1\xb3\x26\x27\x27\x39\xa6\xd5\x6a\x61\xb7\xdb\x99\x11\x67\x14\x8b\x45\xec\xef\xef\xf3\xba\x5e\xaf\xc7\xcc\xcc\x0c\xef\x0f\x87\xc3\xbc\xbe\xbd\xbd\xcd\x6b\xc2\xd3\xf2\xf2\x32\xe2\xf1\xb8\xf4\xef\x74\x3a\x31\x3f\x3f\x8f\xd3\xd3\x53\x1c\x1d\x1d\x49\xcf\x57\x57\x57\xb8\xbf\xbf\x67\x6e\x7a\x7a\x1a\x13\x13\x13\xd2\xc7\xd7\xd7\x97\xe4\x3f\x3f\x3f\xd9\x73\x26\x93\xc1\xd3\xd3\x13\xaf\x93\x07\x91\x37\x0d\xe2\x69\x08\xfe\xf2\xf2\x92\x6b\x49\x7a\x7b\x7b\xe3\x3c\x45\x0d\x69\xbe\xb0\xb0\x80\xa5\xa5\x25\xac\xad\xad\x61\x75\x75\x95\x3d\xd0\xf7\x29\x7f\xe2\xf7\xf6\xf6\xd0\x6c\x36\x99\x71\xbb\xdd\xb0\xd9\x6c\xb2\x26\x74\xe7\xd1\x68\x94\x73\x2c\x14\x0a\xc8\xe7\xf3\x70\xb9\x5c\xd8\xd8\xd8\x90\x7e\x76\x76\x76\x50\x2e\x97\x99\x49\xa7\xd3\x08\x04\x02\xb2\x67\xd4\xf7\x4b\x73\xd1\x3b\x26\x93\x49\xf2\xe7\xe7\xe7\xbc\x97\xd4\x68\x34\xe0\xf7\xfb\xf9\x1c\xca\x49\xe4\xf5\xf2\xf2\x82\x95\x95\x15\x24\x93\x49\x7e\x37\x9b\xcd\x92\x37\x1a\x8d\x63\x77\x48\x6c\x30\x18\x44\xb7\xdb\x95\xb1\xe3\xe3\x63\x2c\x2e\x2e\xa2\x54\x2a\x71\x9f\xec\xee\xee\x32\xbb\xbe\xbe\x8e\x5c\x2e\x37\xe6\x91\x94\x48\x24\xe0\xf1\x78\x64\x5e\xd4\xcb\xe4\x25\x16\x8b\xf1\x59\xc4\xd2\x79\xd4\xdf\xea\xde\x23\x9e\xe6\x94\x8f\xc3\xe1\xc0\xcd\xcd\x0d\xae\xaf\xaf\x71\x77\x77\x87\x8b\x8b\x0b\xcc\xcd\xcd\x31\x6b\x30\x18\xb8\xd6\x6a\x56\xed\x41\xf8\x88\x44\x22\xb0\x5a\xad\x78\x7f\x7f\xc7\xe3\xe3\x23\x1e\x1e\x1e\xf0\xf1\xf1\xc1\x39\xfe\x89\x15\xa2\x38\xd5\xb2\x5a\xad\x22\x9b\xcd\xa2\x52\xa9\xf0\xbc\xd5\x6a\xfd\xf6\x7f\x11\x52\xfe\x51\xbf\x02\x00\x00\xff\xff\x04\x19\xef\x18\x7e\x04\x00\x00")

func faviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_faviconIco,
		"favicon.ico",
	)
}

func faviconIco() (*asset, error) {
	bytes, err := faviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "favicon.ico", size: 1150, mode: os.FileMode(420), modTime: time.Unix(1526061977, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"favicon.ico": faviconIco,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"favicon.ico": &bintree{faviconIco, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
